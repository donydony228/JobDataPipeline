version: '3.8'

x-common-env: &common-env
  AIRFLOW__CORE__EXECUTOR: LocalExecutor
  AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres-airflow:5432/airflow
  AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres-airflow:5432/airflow
  AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
  AIRFLOW__CORE__FERNET_KEY: 'your-fernet-key-here-32-chars-long'
  AIRFLOW__WEBSERVER__SECRET_KEY: 'your-secret-key-here'
  AIRFLOW__LOGGING__LOGGING_LEVEL: INFO

services:
  # Airflow 資料庫
  postgres-airflow:
    image: postgres:15
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-airflow-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s

  # 資料倉儲
  postgres-dwh:
    image: postgres:15
    container_name: job-dwh-postgres
    environment:
      POSTGRES_USER: dwh_user
      POSTGRES_PASSWORD: dwh_password
      POSTGRES_DB: job_data_warehouse
    ports:
      - "5433:5432"
    volumes:
      - postgres-dwh-data:/var/lib/postgresql/data
      - ./sql/ddl:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "dwh_user"]
      interval: 10s
      retries: 5

  # 資料湖儲存
  minio:
    image: minio/minio:latest
    container_name: job-minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    command: server /data --console-address ":9001"
    volumes:
      - minio-data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # 快取層
  redis:
    image: redis:7-alpine
    container_name: job-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes

  # NoSQL 資料庫
  mongodb:
    image: mongo:7.0
    container_name: job-mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongodb-data:/data/db
      - ./scripts/mongodb:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Airflow Init (資料庫初始化)
  airflow-init:
    image: apache/airflow:2.9.3-python3.9
    container_name: airflow-init
    depends_on:
      postgres-airflow:
        condition: service_healthy
    environment:
      <<: *common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: admin
      _AIRFLOW_WWW_USER_PASSWORD: admin123
      _AIRFLOW_WWW_USER_EMAIL: admin@jobdata.com
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./requirements.txt:/requirements.txt
    command: |
      bash -c "
        pip install -r /requirements.txt
        airflow db migrate
        airflow users create -r Admin -u admin -e admin@jobdata.com -f Data -l Engineer -p admin123
      "

  # Airflow Webserver
  airflow-webserver:
    image: apache/airflow:2.9.3-python3.9
    container_name: airflow-webserver
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *common-env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./requirements.txt:/requirements.txt
    ports:
      - "8080:8080"
    command: |
      bash -c "
        pip install -r /requirements.txt
        airflow webserver
      "
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Airflow Scheduler
  airflow-scheduler:
    image: apache/airflow:2.9.3-python3.9
    container_name: airflow-scheduler
    depends_on:
      airflow-init:
        condition: service_completed_successfully
    environment:
      <<: *common-env
    volumes:
      - ./dags:/opt/airflow/dags
      - ./src:/opt/airflow/src
      - ./config:/opt/airflow/config
      - ./requirements.txt:/requirements.txt
    command: |
      bash -c "
        pip install -r /requirements.txt
        airflow scheduler
      "

  # 監控工具
  grafana:
    image: grafana/grafana:latest
    container_name: job-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana-data:/var/lib/grafana

volumes:
  postgres-airflow-data:
  postgres-dwh-data:
  minio-data:
  redis-data:
  mongodb-data:
  grafana-data:

networks:
  default:
    name: job-data-platform